{"ast":null,"code":"import _slicedToArray from \"/Users/dmendoza/Documents/react-projects/photo-management-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dmendoza/Documents/react-projects/photo-management-app/src/components/PopUp.js\";\nimport React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/lib/ReactCrop.scss';\n\nconst PopUp = ({\n  photoId,\n  photos,\n  setPhotos,\n  togglePopUp\n}) => {\n  let image = photos.filter(photo => photo.id === photoId);\n  let imgSrc = image[0].url; //const getImage = <img src={image[0].url} alt={photoId} />;\n\n  const _useState = useState({\n    src: image[0].url,\n    crop: {\n      unit: \"%\",\n      width: 30,\n      aspect: 16 / 9\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        crop = _useState2[0],\n        setCrop = _useState2[1];\n\n  const handleRemove = () => {\n    let newPhotos = photos.filter(photo => photo.id !== photoId);\n    setPhotos(newPhotos);\n    togglePopUp('');\n  };\n\n  const handleOnCropChange = crop => {\n    //  setCrop({crop});\n    console.log(crop);\n  };\n\n  const handleOnCropComplete = crop => {\n    console.log(crop); //makeClientCrop(crop)\n  }; // const makeClientCrop = async crop => {\n  //   if(image && crop.width && crop.height) {\n  //     const croppedImageUrl = await this.getCroppedImg(\n  //       image,\n  //       crop,\n  //       \"newFile.jpeg\"\n  //     );\n  //     this.setState({ croppedImageUrl });\n  //   }\n  // };\n  // const getCroppedImg = (image, crop, fileName) => {\n  //   const canvas = document.createElement(\"canvas\");\n  //   const scaleX = image.naturalWidth / image.width;\n  //   const scaleY = image.naturalHeight / image.height;\n  //   canvas.width = crop.width;\n  //   canvas.height = crop.height;\n  //   const ctx = canvas.getContext(\"2d\");\n  //\n  //   ctx.drawImage(\n  //     image,\n  //     crop.x * scaleX,\n  //     crop.y * scaleY,\n  //     crop.width * scaleX,\n  //     crop.height * scaleY,\n  //     0,\n  //     0,\n  //     crop.width,\n  //     crop.height\n  //   );\n  //\n  //   return new Promise((resolve, reject) => {\n  //     canvas.toBlob(blob => {\n  //       if (!blob) {\n  //         //reject(new Error('Canvas is empty'));\n  //         console.error(\"Canvas is empty\");\n  //         return;\n  //       }\n  //       blob.name = fileName;\n  //       window.URL.revokeObjectURL(this.fileUrl);\n  //       this.fileUrl = window.URL.createObjectURL(blob);\n  //       resolve(this.fileUrl);\n  //     }, \"image/jpeg\");\n  //   });\n  // };\n\n\n  return (// <div>\n    //   <div className=\"popup-overlay\" onClick={()=> togglePopUp('')}>\n    //   </div>\n    //   <div className=\"full-image-component\">\n    //     <div className=\"close-btn\" onClick={()=> togglePopUp('')}>x</div>\n    // {/* <div className=\"image-fullsize-container\">{getImage}</div> */}\n    //      <div className=\"image-fullsize-container\">\n    React.createElement(ReactCrop, {\n      src: crop.src,\n      alt: photoId,\n      crop: crop,\n      onChange: handleOnCropChange,\n      onCropComplete: handleOnCropComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }) //     </div>\n    //     <div className=\"image-actions\">\n    //       <button className=\"btn primary-btn crop-btn\">Crop</button>\n    //       <button className=\"danger-btn remove btn\" onClick={handleRemove}>Remove</button>\n    //     </div>\n    //   </div>\n    // </div>\n\n  );\n};\n\nexport default PopUp;","map":{"version":3,"sources":["/Users/dmendoza/Documents/react-projects/photo-management-app/src/components/PopUp.js"],"names":["React","useState","ReactCrop","PopUp","photoId","photos","setPhotos","togglePopUp","image","filter","photo","id","imgSrc","url","src","crop","unit","width","aspect","setCrop","handleRemove","newPhotos","handleOnCropChange","console","log","handleOnCropComplete"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA,SAAlB;AAA6BC,EAAAA;AAA7B,CAAD,KAA+C;AAC3D,MAAIC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaP,OAArC,CAAZ;AACA,MAAIQ,MAAM,GAAGJ,KAAK,CAAC,CAAD,CAAL,CAASK,GAAtB,CAF2D,CAG3D;;AAH2D,oBAKnCZ,QAAQ,CAAC;AAC/Ba,IAAAA,GAAG,EAAEN,KAAK,CAAC,CAAD,CAAL,CAASK,GADiB;AAE/BE,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,GADF;AAEJC,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,MAAM,EAAE,KAAG;AAHP;AAFyB,GAAD,CAL2B;AAAA;AAAA,QAKpDH,IALoD;AAAA,QAK9CI,OAL8C;;AAe3D,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAIC,SAAS,GAAGhB,MAAM,CAACI,MAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaP,OAArC,CAAhB;AACAE,IAAAA,SAAS,CAACe,SAAD,CAAT;AACAd,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAJD;;AAMA,QAAMe,kBAAkB,GAAIP,IAAD,IAAU;AACrC;AACEQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACD,GAHD;;AAKA,QAAMU,oBAAoB,GAAIV,IAAD,IAAU;AACrCQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ,EADqC,CAErC;AACD,GAHD,CA1B2D,CA+B3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AACA;AACA;AACA;AACA;AACI;AACN;AACQ,wBAAC,SAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACD,GADZ;AAEE,MAAA,GAAG,EAAEV,OAFP;AAGE,MAAA,IAAI,EAAEW,IAHR;AAIE,MAAA,QAAQ,EAAEO,kBAJZ;AAKE,MAAA,cAAc,EAAEG,oBALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARR,CAeE;AACA;AACA;AACA;AACA;AACA;AACA;;AArBF;AAuBD,CApGD;;AAsGA,eAAetB,KAAf","sourcesContent":["import React, {useState} from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/lib/ReactCrop.scss';\n\nconst PopUp = ({photoId, photos, setPhotos, togglePopUp}) => {\n  let image = photos.filter( photo => photo.id === photoId );\n  let imgSrc = image[0].url;\n  //const getImage = <img src={image[0].url} alt={photoId} />;\n\n  const [crop, setCrop] = useState({\n    src: image[0].url,\n    crop: {\n      unit: \"%\",\n      width: 30,\n      aspect: 16/9\n    }\n  });\n\n\n  const handleRemove = () => {\n    let newPhotos = photos.filter( photo => photo.id !== photoId );\n    setPhotos(newPhotos);\n    togglePopUp('');\n  }\n\n  const handleOnCropChange = (crop) => {\n  //  setCrop({crop});\n    console.log(crop)\n  };\n\n  const handleOnCropComplete = (crop) => {\n    console.log(crop);\n    //makeClientCrop(crop)\n  };\n\n  // const makeClientCrop = async crop => {\n  //   if(image && crop.width && crop.height) {\n  //     const croppedImageUrl = await this.getCroppedImg(\n  //       image,\n  //       crop,\n  //       \"newFile.jpeg\"\n  //     );\n  //     this.setState({ croppedImageUrl });\n  //   }\n  // };\n\n  // const getCroppedImg = (image, crop, fileName) => {\n  //   const canvas = document.createElement(\"canvas\");\n  //   const scaleX = image.naturalWidth / image.width;\n  //   const scaleY = image.naturalHeight / image.height;\n  //   canvas.width = crop.width;\n  //   canvas.height = crop.height;\n  //   const ctx = canvas.getContext(\"2d\");\n  //\n  //   ctx.drawImage(\n  //     image,\n  //     crop.x * scaleX,\n  //     crop.y * scaleY,\n  //     crop.width * scaleX,\n  //     crop.height * scaleY,\n  //     0,\n  //     0,\n  //     crop.width,\n  //     crop.height\n  //   );\n  //\n  //   return new Promise((resolve, reject) => {\n  //     canvas.toBlob(blob => {\n  //       if (!blob) {\n  //         //reject(new Error('Canvas is empty'));\n  //         console.error(\"Canvas is empty\");\n  //         return;\n  //       }\n  //       blob.name = fileName;\n  //       window.URL.revokeObjectURL(this.fileUrl);\n  //       this.fileUrl = window.URL.createObjectURL(blob);\n  //       resolve(this.fileUrl);\n  //     }, \"image/jpeg\");\n  //   });\n  // };\n\n  return (\n    // <div>\n    //   <div className=\"popup-overlay\" onClick={()=> togglePopUp('')}>\n    //   </div>\n    //   <div className=\"full-image-component\">\n    //     <div className=\"close-btn\" onClick={()=> togglePopUp('')}>x</div>\n        // {/* <div className=\"image-fullsize-container\">{getImage}</div> */}\n  //      <div className=\"image-fullsize-container\">\n          <ReactCrop\n            src={crop.src}\n            alt={photoId}\n            crop={crop}\n            onChange={handleOnCropChange}\n            onCropComplete={handleOnCropComplete}\n          />\n    //     </div>\n    //     <div className=\"image-actions\">\n    //       <button className=\"btn primary-btn crop-btn\">Crop</button>\n    //       <button className=\"danger-btn remove btn\" onClick={handleRemove}>Remove</button>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default PopUp;\n"]},"metadata":{},"sourceType":"module"}