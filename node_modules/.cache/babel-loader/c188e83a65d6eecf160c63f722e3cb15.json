{"ast":null,"code":"import _defineProperty from \"/Users/dmendoza/Documents/react-projects/photo-management-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/dmendoza/Documents/react-projects/photo-management-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dmendoza/Documents/react-projects/photo-management-app/src/components/PopUp.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nconst PopUp = ({\n  photoId,\n  photos,\n  setPhotos,\n  togglePopUp\n}) => {\n  let image = photos.filter(photo => photo.id === photoId);\n  let imgSrc = image[0].url;\n  const getImage = React.createElement(\"img\", {\n    src: image[0].url,\n    alt: photoId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  });\n\n  const _useState = useState({\n    src: '',\n    crop: {\n      unit: \"%\",\n      width: 30,\n      aspect: 1 / 1\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        crop = _useState2[0],\n        setCrop = _useState2[1];\n\n  let img = new Image();\n  img.src = image[0].url;\n\n  img.onload = () => {\n    setCrop(_objectSpread({}, crop, {\n      src: img.src\n    }));\n    console.log('crop', crop);\n  };\n\n  const handleRemove = () => {\n    let newPhotos = photos.filter(photo => photo.id !== photoId);\n    setPhotos(newPhotos);\n    togglePopUp('');\n  };\n\n  const handleOnCropChange = crop => {\n    setCrop({\n      crop\n    });\n    console.log(crop);\n  };\n\n  const handleOnCropComplete = crop => {\n    makeClientCrop(crop);\n  };\n\n  const makeClientCrop = async crop => {\n    if (image && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(image, crop, \"newFile.jpeg\");\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  };\n\n  const getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  };\n\n  console.log('SRC', crop.src);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    onClick: () => togglePopUp(''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"full-image-component\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"close-btn\",\n    onClick: () => togglePopUp(''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"x\"), React.createElement(ReactCrop, {\n    src: crop.src,\n    alt: photoId,\n    crop: crop,\n    onChange: handleOnCropChange,\n    onCropComplete: handleOnCropComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"image-actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn primary-btn crop-btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Crop\"), React.createElement(\"button\", {\n    className: \"danger-btn remove btn\",\n    onClick: handleRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Remove\"))));\n};\n\nexport default PopUp;","map":{"version":3,"sources":["/Users/dmendoza/Documents/react-projects/photo-management-app/src/components/PopUp.js"],"names":["React","useState","ReactCrop","PopUp","photoId","photos","setPhotos","togglePopUp","image","filter","photo","id","imgSrc","url","getImage","src","crop","unit","width","aspect","setCrop","img","Image","onload","console","log","handleRemove","newPhotos","handleOnCropChange","handleOnCropComplete","makeClientCrop","height","croppedImageUrl","getCroppedImg","setState","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css'\n\nconst PopUp = ({photoId, photos, setPhotos, togglePopUp}) => {\n  let image = photos.filter( photo => photo.id === photoId );\n  let imgSrc = image[0].url;\n  const getImage = <img src={image[0].url} alt={photoId} />;\n\n  const [crop, setCrop] = useState({\n    src: '',\n    crop: {\n      unit: \"%\",\n      width: 30,\n      aspect: 1/1\n    }\n  });\n\n  let img = new Image();\n  img.src = image[0].url;\n  img.onload = () => {\n    setCrop({...crop, src: img.src});\n    console.log('crop', crop)\n  }\n\n\n  const handleRemove = () => {\n    let newPhotos = photos.filter( photo => photo.id !== photoId );\n    setPhotos(newPhotos);\n    togglePopUp('');\n  }\n\n  const handleOnCropChange = (crop) => {\n    setCrop({crop});\n    console.log(crop)\n  };\n\n  const handleOnCropComplete = (crop) => {\n    makeClientCrop(crop)\n  };\n\n  const makeClientCrop = async crop => {\n    if(image && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        image,\n        crop,\n        \"newFile.jpeg\"\n      );\n      this.setState({ croppedImageUrl });\n    }\n  };\n\n  const getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  };\n  console.log('SRC', crop.src);\n\n  return (\n    <div>\n      <div className=\"popup-overlay\" onClick={()=> togglePopUp('')}>\n      </div>\n      <div className=\"full-image-component\">\n        <div className=\"close-btn\" onClick={()=> togglePopUp('')}>x</div>\n        {/* <div className=\"image-fullsize-container\">{getImage}</div> */}\n        <ReactCrop\n          src={crop.src}\n          alt={photoId}\n          crop={crop}\n          onChange={handleOnCropChange}\n          onCropComplete={handleOnCropComplete}\n        />\n        <div className=\"image-actions\">\n          <button className=\"btn primary-btn crop-btn\">Crop</button>\n          <button className=\"danger-btn remove btn\" onClick={handleRemove}>Remove</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PopUp;\n"]},"metadata":{},"sourceType":"module"}